name: CD - Deploy Backend

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'backend/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16.3
        env:
          POSTGRES_USER: nikul
          POSTGRES_PASSWORD: nikul123
          POSTGRES_DB: customer
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List Directory Contents
        run: ls -la  # Verify the contents of the backend directory

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Build Number
        id: docker_build_number
        run: echo "BUILD_NUMBER=$(date '+%d.%m.%Y.%H.%M.%S')" >> $GITHUB_OUTPUT

      - name: Build Package and Push Docker Image with Maven
        run: mvn -ntp -B verify -Ddocker.image.tag=${{ steps.docker_build_number.outputs.BUILD_NUMBER }} jib:build
        working-directory: ./backend

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh  # Create the .ssh directory if it doesn't exist
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/my-ec2-key
          chmod 600 ~/.ssh/my-ec2-key

      - name: Test SSH Connection
        run: |
          ssh -i ~/.ssh/my-ec2-key -o StrictHostKeyChecking=no -v \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'echo "SSH connection successful"'
      

      - name: Run Docker Image on AWS EC2
        run: |
          ssh -i ~/.ssh/my-ec2-key -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            sudo apt update
            sudo apt install -y openjdk-17-jdk docker.io maven
            sudo systemctl enable docker --now
            sudo usermod -aG docker $USER  # Allow user to run Docker without sudo

            # Pull the Docker image directly from DockerHub
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/fullstack-app:${{ steps.docker_build_number.outputs.BUILD_NUMBER }}
            # Run the Docker container
            docker run -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/fullstack-app:${{ steps.docker_build_number.outputs.BUILD_NUMBER }}
      
